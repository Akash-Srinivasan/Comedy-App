# backend/.env.example
# Database Configuration
SUPABASE_URL=https://atszsoxuuifclleidzme.supabase.co
SUPABASE_SERVICE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF0c3pzb3h1dWlmY2xsZWlkem1lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYwOTMyNzIsImV4cCI6MjA3MTY2OTI3Mn0.1SNbiOCXgslVefclXyFep4Lue1tHv_d3XARKAGjCJxM

# Redis Configuration  
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0

# Application Configuration
ENVIRONMENT=development
PORT=8000
LOG_LEVEL=INFO

# ML Model Configuration
ML_MODEL_VERSION=1.0.0
FEATURE_STORE_TTL=604800  # 7 days in seconds
BANDIT_EXPLORATION_FACTOR=2.0
ONLINE_LEARNING_RATE=0.01

# External APIs (if needed)
# OPENAI_API_KEY=your_openai_key_for_content_analysis
# GOOGLE_CLOUD_PROJECT=your_gcp_project_for_video_analysis

# Monitoring and Observability
PROMETHEUS_ENABLED=true
GRAFANA_ENABLED=true

# Security
CORS_ORIGINS=http://localhost:3000,https://yourdomain.com
RATE_LIMIT_PER_MINUTE=60

---

# frontend/.env.local.example
NEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url_here
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_public_key_here
NEXT_PUBLIC_API_URL=http://localhost:8000

# Optional: Analytics and monitoring
# NEXT_PUBLIC_GA_TRACKING_ID=GA_MEASUREMENT_ID
# NEXT_PUBLIC_SENTRY_DSN=your_sentry_dsn

---

# nginx.conf
events {
    worker_connections 1024;
}

http {
    upstream frontend {
        server comedy-frontend-service:3000;
    }
    
    upstream backend {
        server comedy-backend-service:8000;
    }
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=2r/s;
    
    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    
    server {
        listen 80;
        server_name comedy-discovery.com www.comedy-discovery.com;
        
        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        server_name comedy-discovery.com www.comedy-discovery.com;
        
        # SSL configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozTLS:10m;
        ssl_session_tickets off;
        
        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        # Frontend routes
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Enable WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # API routes with rate limiting
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers for API
            add_header Access-Control-Allow-Origin "https://comedy-discovery.com" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
        
        # Special rate limiting for auth endpoints
        location /api/interactions {
            limit_req zone=login burst=5 nodelay;
            proxy_pass http://backend/interactions;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Health check endpoint
        location /health {
            proxy_pass http://backend/health;
            access_log off;
        }
        
        # Static file caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            proxy_pass http://frontend;
        }
    }
}

---

# deploy.sh
#!/bin/bash

set -e

echo "ðŸš€ Deploying Comedy Discovery App..."

# Configuration
ENVIRONMENT=${1:-production}
NAMESPACE="comedy-discovery"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed"
        exit 1
    fi
    
    if ! command -v kubectl &> /dev/null; then
        log_error "kubectl is not installed"
        exit 1
    fi
    
    # Check if .env files exist
    if [ ! -f "backend/.env" ]; then
        log_error "backend/.env not found. Copy from .env.example and configure."
        exit 1
    fi
    
    if [ ! -f "frontend/.env.local" ]; then
        log_error "frontend/.env.local not found. Copy from .env.local.example and configure."
        exit 1
    fi
    
    log_info "Prerequisites check passed âœ…"
}

# Build Docker images
build_images() {
    log_info "Building Docker images..."
    
    # Build backend
    log_info "Building backend image..."
    docker build -t comedy-app/backend:latest ./backend
    
    # Build frontend
    log_info "Building frontend image..."
    docker build -t comedy-app/frontend:latest ./frontend
    
    log_info "Docker images built successfully âœ…"
}

# Deploy to Kubernetes
deploy_to_k8s() {
    log_info "Deploying to Kubernetes..."
    
    # Create namespace if it doesn't exist
    kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
    
    # Create secrets (you'll need to modify this based on your actual secrets)
    log_info "Creating secrets..."
    kubectl create secret generic app-secrets \
        --from-env-file=backend/.env \
        --namespace=$NAMESPACE \
        --dry-run=client -o yaml | kubectl apply -f -
    
    # Apply Kubernetes manifests
    log_info "Applying Kubernetes manifests..."
    kubectl apply -f k8s/ --namespace=$NAMESPACE
    
    # Wait for deployments to be ready
    log_info "Waiting for deployments to be ready..."
    kubectl wait --for=condition=available --timeout=300s deployment/comedy-backend --namespace=$NAMESPACE
    kubectl wait --for=condition=available --timeout=300s deployment/comedy-frontend --namespace=$NAMESPACE
    kubectl wait --for=condition=available --timeout=300s deployment/redis --namespace=$NAMESPACE
    
    log_info "Deployment completed successfully âœ…"
}

# Run database migrations/setup
setup_database() {
    log_info "Setting up database..."
    
    # This would run your database setup scripts
    # For now, it's a placeholder
    log_info "Run the SQL scripts in your Supabase dashboard:"
    log_info "1. Database schema (from the setup guide)"
    log_info "2. Seed data for comedians and media items"
    
    log_warn "Database setup requires manual steps - see README for details"
}

# Health check
health_check() {
    log_info "Performing health check..."
    
    # Get the external IP (this varies by cloud provider)
    EXTERNAL_IP=$(kubectl get service comedy-frontend-service --namespace=$NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
    
    if [ "$EXTERNAL_IP" = "pending" ] || [ -z "$EXTERNAL_IP" ]; then
        log_warn "External IP not yet available. Check with:"
        log_warn "kubectl get services --namespace=$NAMESPACE"
    else
        log_info "Application should be available at: http://$EXTERNAL_IP"
    fi
    
    # Check pod status
    kubectl get pods --namespace=$NAMESPACE
}

# Main deployment flow
main() {
    log_info "Starting deployment for environment: $ENVIRONMENT"
    
    check_prerequisites
    build_images
    
    if [ "$ENVIRONMENT" = "production" ] || [ "$ENVIRONMENT" = "staging" ]; then
        deploy_to_k8s
        setup_database
        health_check
    else
        log_info "For development, run: docker-compose up -d"
    fi
    
    log_info "ðŸŽ‰ Deployment completed!"
    
    if [ "$ENVIRONMENT" = "development" ]; then
        log_info "Access the application at:"
        log_info "Frontend: http://localhost:3000"
        log_info "Backend API: http://localhost:8000"
        log_info "Backend Health: http://localhost:8000/health"
    fi
}

# Run main function
main "$@"