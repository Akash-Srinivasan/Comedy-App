# monitoring/prometheus.yml
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - "comedy_alerts.yml"

scrape_configs:
  # Comedy Discovery Backend
  - job_name: 'comedy-backend'
    static_configs:
      - targets: ['backend:8000']
    metrics_path: '/metrics'
    scrape_interval: 10s
    scrape_timeout: 5s

  # Redis monitoring
  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']
    scrape_interval: 15s

  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # Nginx metrics (if nginx-prometheus-exporter is used)
  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx:9113']
    scrape_interval: 15s

  # Kubernetes pods (for production)
  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - comedy-discovery
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

---

# monitoring/comedy_alerts.yml
groups:
  - name: comedy_discovery_alerts
    rules:
      # High error rate
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value }} errors per second"

      # Low recommendation accuracy
      - alert: LowRecommendationAccuracy
        expr: recommendation_accuracy < 0.6
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Recommendation accuracy is low"
          description: "Current accuracy is {{ $value }}"

      # High response time
      - alert: HighResponseTime
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 2
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High response time"
          description: "95th percentile response time is {{ $value }} seconds"

      # Redis down
      - alert: RedisDown
        expr: up{job="redis"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Redis is down"
          description: "Redis has been down for more than 1 minute"

      # Low user interaction rate
      - alert: LowUserInteractionRate
        expr: rate(user_interactions_total[1h]) < 10
        for: 15m
        labels:
          severity: warning
        annotations:
          summary: "Low user interaction rate"
          description: "User interaction rate is {{ $value }} per hour"

---

# monitoring/grafana-dashboards/comedy-dashboard.json
{
  "dashboard": {
    "id": null,
    "title": "Comedy Discovery Metrics",
    "tags": ["comedy", "ml", "recommendations"],
    "timezone": "browser",
    "panels": [
      {
        "id": 1,
        "title": "Request Rate",
        "type": "graph",
        "targets": [
          {
            "expr": "rate(http_requests_total{job=\"comedy-backend\"}[5m])",
            "legendFormat": "{{method}} {{endpoint}}"
          }
        ],
        "yAxes": [
          {
            "label": "Requests/sec",
            "min": 0
          }
        ],
        "xAxis": {
          "show": true
        },
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 0,
          "y": 0
        }
      },
      {
        "id": 2,
        "title": "Response Times",
        "type": "graph",
        "targets": [
          {
            "expr": "histogram_quantile(0.50, rate(http_request_duration_seconds_bucket{job=\"comedy-backend\"}[5m]))",
            "legendFormat": "50th percentile"
          },
          {
            "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job=\"comedy-backend\"}[5m]))",
            "legendFormat": "95th percentile"
          }
        ],
        "yAxes": [
          {
            "label": "Seconds",
            "min": 0
          }
        ],
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 12,
          "y": 0
        }
      },
      {
        "id": 3,
        "title": "User Interactions by Type",
        "type": "graph",
        "targets": [
          {
            "expr": "rate(user_interactions_total[5m])",
            "legendFormat": "{{interaction_type}}"
          }
        ],
        "yAxes": [
          {
            "label": "Interactions/sec",
            "min": 0
          }
        ],
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 0,
          "y": 8
        }
      },
      {
        "id": 4,
        "title": "Recommendation Accuracy",
        "type": "singlestat",
        "targets": [
          {
            "expr": "avg(recommendation_accuracy)",
            "legendFormat": "Accuracy"
          }
        ],
        "valueName": "current",
        "format": "percent",
        "thresholds": "0.6,0.8",
        "colorBackground": true,
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 12,
          "y": 8
        }
      },
      {
        "id": 5,
        "title": "Active Users",
        "type": "graph",
        "targets": [
          {
            "expr": "count(increase(user_interactions_total[1h]) > 0)",
            "legendFormat": "Active users/hour"
          }
        ],
        "yAxes": [
          {
            "label": "Users",
            "min": 0
          }
        ],
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 0,
          "y": 16
        }
      },
      {
        "id": 6,
        "title": "Model Performance",
        "type": "graph",
        "targets": [
          {
            "expr": "precision_at_k{k=\"5\"}",
            "legendFormat": "Precision@5"
          },
          {
            "expr": "recall_at_k{k=\"10\"}",
            "legendFormat": "Recall@10"
          },
          {
            "expr": "ndcg_score",
            "legendFormat": "NDCG"
          }
        ],
        "yAxes": [
          {
            "label": "Score",
            "min": 0,
            "max": 1
          }
        ],
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 12,
          "y": 16
        }
      },
      {
        "id": 7,
        "title": "Redis Memory Usage",
        "type": "graph",
        "targets": [
          {
            "expr": "redis_memory_used_bytes{job=\"redis\"}",
            "legendFormat": "Used Memory"
          }
        ],
        "yAxes": [
          {
            "label": "Bytes",
            "min": 0
          }
        ],
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 0,
          "y": 24
        }
      },
      {
        "id": 8,
        "title": "Error Rate",
        "type": "graph",
        "targets": [
          {
            "expr": "rate(http_requests_total{status=~\"4..\"}[5m])",
            "legendFormat": "4xx errors"
          },
          {
            "expr": "rate(http_requests_total{status=~\"5..\"}[5m])",
            "legendFormat": "5xx errors"
          }
        ],
        "yAxes": [
          {
            "label": "Errors/sec",
            "min": 0
          }
        ],
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 12,
          "y": 24
        }
      }
    ],
    "time": {
      "from": "now-1h",
      "to": "now"
    },
    "refresh": "10s"
  }
}